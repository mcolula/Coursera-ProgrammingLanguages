;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs; it is what functions evaluate to
(struct closure (env fun) #:transparent) 

;; Problem 1


(define (sequence low high stride)
  (cond [(<= low high)
         (cons low (sequence (+ low stride) high stride))]
        [#t null]))


;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        ;; CHANGE add more cases here
        [#t (error (format "bad MUPL expression: ~v" e))]))

;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))

(define (string-append-map xs suffix)
  (map (lambda(x)(string-append x suffix)) xs))
        
;; Problem 3

(define (ifaunit e1 e2 e3) "CHANGE")

(define (mlet* lstlst e2) "CHANGE")

(define (ifeq e1 e2 e3 e4) "CHANGE")

( define (list-nth-mod xs x) (cond [(< x 0)    (error "list-nth-mod: negative number")]
                                   [(null? xs) (error "list-nth-mod: empty list")]
                                   [#t (car (list-tail xs (remainder x (length xs))))]))

;; Problem 4

(define mupl-map "CHANGE")

(define mupl-mapAddN 
  (mlet "map" mupl-map
        "CHANGE (notice map is now in MUPL scope)"))

(define (stream-for-n-steps s n)
  (if (= 0 n)
      null
      (cons (car(s)) (stream-for-n-steps (cdr (s)) (- n 1)))))


(define funny-number-stream
  (letrec ([f (lambda (x) (if (= 0 (remainder x 5))
                              (cons (* -1 x) (lambda () (f (+ x 1))))
                              (cons x (lambda () (f (+ x 1))))))])
    (lambda () (f 1))))


(define dan-then-dog
  (letrec ([f (lambda (x) (if x
                              (cons "dog.jpg" (lambda () (f #f)))
                              (cons "dan.jpg" (lambda () (f #t)))))])
    (lambda () (f #f))))

(define (stream-add-zero s)
  (letrec ([f (lambda (x) (cons (cons (car (x)) 0) (lambda()((stream-add-zero (cdr (x)))))))])
    (lambda() (f s))))

(define (cycle-lists xs ys)
  (letrec ([f (lambda (n)
              (cons (cons (list-nth-mod xs n) (list-nth-mod ys n))
                    (lambda () (f (+ n 1)))))])
    (lambda () (f 0))))

(define (vector-assoc v vec)
  (letrec ([f (lambda (n)
                (if (>= n (vector-length vec)) #f
                    (let ([vi (vector-ref vec n)])
                      (cond [(not (pair? vi)) (f (+ n 1))]
                            [(equal? (car vi) v) vi]
                            [#t (f (+ n 1))]))))])
    (f 0)))
 
(define (cached-assoc xs n)
  (letrec ([cache-vec (make-vector n #f)]
           [next 0]
           [f (lambda (x)
                (let ([ans (vector-assoc x cache-vec)])
                 (if ans
                     ans
                     (let ([new-ans (assoc x xs)])
                       new-ans
                       (begin
                         (vector-set! cache-vec next new-ans)
                         (set! next (remainder (+ next 1) n))
                         new-ans)))))])
  f))

;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
